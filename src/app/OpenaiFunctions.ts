"use server";

import dotenv from 'dotenv';
dotenv.config();

import { ChatCompletionRequestMessage, Configuration, OpenAIApi } from "openai";


const configuration = new Configuration({apiKey: process.env.OPENAI_API_KEY});
const openai = new OpenAIApi(configuration);


let prePrompt: ChatCompletionRequestMessage[] = [
    {role: "user", content: "Tu es un consultant McKinsey s√©nior. Tu me fais passer un entretiens d'embauche. Tu me fais passer une √©tude de cas. Tu vas me donner la probl√©matique de l'√©tude de cas et je vais devoir y r√©pondre, d'abord en posant quelques questions pour √©claircir la situation (si n√©cessaire), puis en proposant une structure puis en d√©roulant ma r√©flexion. Tu me guides dans l'exercice, sans me donner directement les r√©ponses. √Ä la fin, tu me fais un d√©brief sur ce qui √©tait bien et ce qui doit √™tre am√©lior√©."},
    {role: "assistant", content: "Ok, c'est parti. Il est temps de passer √† l'√©tude de cas. √ätes-vous pr√™t ?"}
];


export async function sendPrompts(conversation: ChatCompletionRequestMessage[]): Promise<string> {

    const fullConv = prePrompt.concat(conversation);

    const completion = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: fullConv,
    });
    const response = completion.data.choices[0].message?.content;
    return response ?? "‚ùå Error";
}


/*
let conversation: ChatCompletionRequestMessage[] = [
    {role: "user", content: "R√©ponds √† ma question en commen√ßant ta phrase par `Il √©tait une fois`."},
];

export async function getConversation() {
    return conversation;
}



export async function askGPT(text: string): Promise<string> {
    console.log("Asking : " + text);
    appendToConversation(text, "user");
    const response = await sendPrompts(conversation);
    appendToConversation(response, "assistant");
    console.log("Asnswering : " + response);
    return response;
}


export async function getHello() {
    const completion = await openai.createChatCompletion({
        model: "gpt-3.5-turbo",
        messages: conversation,
    });
    const response = completion.data.choices[0].message?.content;
    console.log("ü§ñ GPT server action : " + response ?? "rien");
    return response ?? "‚ùå Error";
}


export async function updateConversation(conversation: ChatCompletionRequestMessage[], text: string, role: role) {
    const message: ChatCompletionRequestMessage = {
        role: role,
        content: text,
    }
    console.log(conversation);
    return [...conversation, message];
}





export async function startConversation(): Promise<string> {
    conversation = mcPrePrompt;
    const response = await sendPrompts(conversation);
    appendToConversation(response, "assistant");
    return response;
}
*/

